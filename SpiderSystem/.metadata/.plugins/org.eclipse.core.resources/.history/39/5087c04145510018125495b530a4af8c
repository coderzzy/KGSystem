package org.SpiderSystem.Local;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import org.apdplat.word.WordFrequencyStatistics;
import org.apdplat.word.analysis.CosineTextSimilarity;
import org.apdplat.word.analysis.EditDistanceTextSimilarity;
import org.apdplat.word.analysis.SimpleTextSimilarity;
import org.apdplat.word.analysis.TextSimilarity;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;

/**
 * 用算法判断文本相似度
 * @author zzy
 *
 */
public class SimilarityOnNews {
	private static final String fileRoot = "/Users/zzy/Desktop/outputs/";
	private static final String fileNews = fileRoot + "news/";
	private static final String fileFrequency = fileRoot + "news_frequency/";
	private static final String fileSimilarity = fileRoot + "news_similarity/";
	private static final String fileCosineTextSimilarity = fileSimilarity + "cosineTextSimilarity/";
	private static final String fileEditDistanceTextSimilarity = fileSimilarity + "editDistanceTextSimilarity/";
	private static final String fileSimpleTextSimilarity = fileSimilarity + "simpleTextSimilarity/";
	
	/**
	 * 将xml新闻文件(18300+)分解成每条新闻对应的文本和分词文本
	 * PS:i = 4705、会报错
	 */
	public void createFrequency(){
		// 1.创建一个输入流，将xml文件加载到输入流
		InputStream in = null;
		try {
			in = new FileInputStream(fileRoot+"news_data.xml");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			// e.printStackTrace();
		}
		
		// 2.创建一个SAXBuilde对象
		SAXBuilder saxBuilder = new SAXBuilder();
		// 3.通过SAXBuilder的build方法将输入流加载到SAXBuilder中
		Document document = null;
		try {
			document = saxBuilder.build(in);
		} catch (JDOMException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// 4.通过Document对象获取xml文件的根节点
		Element rootElement = document.getRootElement();
		// 5.根据根节点获取子节点的List集合
		@SuppressWarnings("unchecked")
		List<Element> bookList = rootElement.getChildren();
		
		// System.out.println(bookList.get(0).getChild("content").getText());
		// System.out.println(bookList.size());
		//词频统计设置
		WordFrequencyStatistics wordFrequencyStatistics = new WordFrequencyStatistics();
		wordFrequencyStatistics.setRemoveStopWord(true);
		for(int i=0;i<4705;i++){
			//清除之前的统计结果
			wordFrequencyStatistics.reset();
			String text = bookList.get(i).getChild("content").getText();
			
			BufferedWriter bf = null;
			try {
				bf = new BufferedWriter(new FileWriter(fileNews+i+".txt"));
				bf.write(text);
				bf.flush();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally{
				try {
					bf.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			//开始分词
			wordFrequencyStatistics.seg(text);
			//输出词频统计结果
			wordFrequencyStatistics.dump(fileFrequency+ i +".txt");
			
			System.out.println("-------------------the " + i + "text-------------------");
		}
		
		for(int i=4706;i<bookList.size();i++){
			//清除之前的统计结果
			wordFrequencyStatistics.reset();
			String text = bookList.get(i).getChild("content").getText();
			
			BufferedWriter bf = null;
			try {
				bf = new BufferedWriter(new FileWriter(fileNews+(i-1)+".txt"));
				bf.write(text);
				bf.flush();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally{
				try {
					bf.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			//开始分词
			wordFrequencyStatistics.seg(text);
			//输出词频统计结果
			wordFrequencyStatistics.dump(fileFrequency+ (i-1) +".txt");
			
			System.out.println("----createFrequency---------------the " + i + "text-------------------");
		}
		
		try {
			in.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * 获取相似度,使用不同的算法
	 * @param textSimilarity
	 * @param textA
	 * @param textB
	 * @return
	 */
	private double getSimilarity(TextSimilarity textSimilarity,String textA,String textB){
		return textSimilarity.similarScore(textA, textB);
	}
	
	private String getText(String fileName){
		BufferedReader bf = null;	
		String result = "";
		try {
			bf = new BufferedReader(new FileReader(fileName));
			String temp = null;
			while((temp = bf.readLine())!=null){
				result += temp;
			}
			// System.out.println(result);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace(); 
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return result;
	}
	
	private void setText(String fileName,double[] data){
		BufferedWriter bf = null;
		try {
			bf = new BufferedWriter(new FileWriter(fileName,false));
			// bf.write(String.valueOf(data));
			for(int i=0;i<data.length;i++){
				bf.write(String.valueOf(data[i]));
				bf.newLine();
			}
			bf.flush();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally{
			try {
				bf.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * 一共18304条新闻,取0-5000编号，5001-18303编号,进行相似度匹配,三种算法
	 */
	private static final int LINE = 5000;
	private static final int TOTAL = 18303;
	public void calcuteSimilarity(){
		// 余弦相似度，通过计算两个向量的夹角余弦值来评估他们的相似度
		TextSimilarity cosineTextSimilarity = new CosineTextSimilarity();
		
		// 简单共有词，通过计算两篇文档共有的词的总字符数除以最长文档字符数来评估他们的相似度
		TextSimilarity simpleTextSimilarity = new SimpleTextSimilarity();
		
		// 编辑距离，通过计算两个字串之间由一个转成另一个所需的最少编辑操作次数来评估他们的相似度
		TextSimilarity editDistanceTextSimilarity = new EditDistanceTextSimilarity();
		
		double[] cosineText = new double[TOTAL-LINE-1];
		double[] simpleText = new double[TOTAL-LINE-1];
		double[] editDistanceText = new double[TOTAL-LINE-1];
		for(int i=0;i<2;i++){
			for(int j=LINE+1;j<5002;j++){
				String textA = getText(fileNews+i+".txt");
				String textB = getText(fileNews+j+".txt");
				cosineText[j-LINE-1] = getSimilarity(cosineTextSimilarity,textA,textB);
				simpleText[j-LINE-1] = getSimilarity(simpleTextSimilarity,textA,textB);
				editDistanceText[j-LINE-1] = getSimilarity(editDistanceTextSimilarity,textA,textB);
			}
			setText(fileCosineTextSimilarity+i+".txt",cosineText);
			setText(fileSimpleTextSimilarity+i+".txt",simpleText);
			setText(fileEditDistanceTextSimilarity+i+".txt",editDistanceText);
			System.out.println("-------calcuteSimilarity------------the " + i + "text-------------------");
		}
			
		
	}
	
	
	
	public static void main(String[] args){
		SimilarityOnNews object = new SimilarityOnNews();
		// object.createFrequency();
		object.calcuteSimilarity();
	}
}
